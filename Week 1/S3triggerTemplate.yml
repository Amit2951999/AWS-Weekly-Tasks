AWSTemplateFormatVersion: '2010-09-09'

Description: A template for event based trigger on S3 using Lmabda

Resources:

  CreateS3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:     
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Description : The IAM Role which has full access to s3 buckets
      RoleName : S3FullAccessRole
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
 
  CreateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: s3trigger-lambda-function
      Code:
        S3Bucket: all-python-scripts
        S3Key: lambda_function2.zip
      Description: This Function is called whenever an object lands on s3, to copy the object to another bucket
      Handler: lambda_function2.lambda_handler
      Role: !GetAtt CreateS3FullAccessRole.Arn
      Runtime: python3.9
      
  primaryS3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: primary-s3bucket1
      NotificationConfiguration:
        LambdaConfigurations: 
        - Event: s3:ObjectCreated:*
          Function: !GetAtt CreateLambdaFunction.Arn
          
  backupS3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: backup-s3buckett1
      
  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction  
      FunctionName: !GetAtt CreateLambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub 
        - 'arn:aws:s3:::${primaryS3bucketName}'
        - primaryS3bucketName: primary-s3bucket1
